{"version":3,"sources":["logo.svg","shared/menu.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Menu","className","href","title","src","alt","Component","Home","lazy","Portal","App","basename","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,8KC6B5BC,E,iLAxBX,OAAO,yBAAKC,UAAU,kBACtB,yBAAKA,UAAU,6CACd,uBAAGA,UAAU,oHAAmH,uBAAGA,UAAU,gBAE7I,uBAAGC,KAAK,WAAWD,UAAU,sEAAsEE,MAAM,QAAO,uBAAGF,UAAU,iBAC7H,uBAAGC,KAAK,WAAWD,UAAU,sEAAsEE,MAAM,oBAAmB,uBAAGF,UAAU,gBACzI,uBAAGC,KAAK,WAAWD,UAAU,sEAAsEE,MAAM,YAAW,uBAAGF,UAAU,oBAUjI,uBAAGC,KAAK,IAAID,UAAU,+EAA+EE,MAAM,cACzG,yBAAKC,IAAI,wBAAwBH,UAAU,YAAaI,IAAI,kB,GAnBhDC,aCIbC,EAAOC,gBAAK,kBAAM,sDAClBC,EAASD,gBAAK,kBAAM,gCAiBXE,MAff,WACE,OAEE,kBAAC,IAAD,CAAYC,SAAS,KACrB,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,4CAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,UAAUC,UAAWN,QCNrBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f1d0bef1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\n\r\nclass Menu extends Component {\r\n  render() {\r\n    return <div className=\"w3-top w3-grey\">\r\n    <div className=\"w3-bar w3-theme-d2 w3-left-align w3-large\">\r\n     <a className=\"w3-bar-item w3-button w3-hide-medium w3-hide-large w3-right w3-padding-large w3-hover-white w3-large w3-theme-d2\"><i className=\"fa fa-bars\"></i></a>\r\n     {/* <a href=\"#/\" className=\"w3-bar-item w3-button w3-padding-large w3-theme-d4\"><i className=\"fa fa-home w3-margin-right\"></i>Logo</a> */}\r\n     <a href=\"#/portal\" className=\"w3-bar-item w3-button w3-hide-small w3-padding-large w3-hover-white\" title=\"News\"><i className=\"fa fa-globe\"></i></a>\r\n     <a href=\"#/portal\" className=\"w3-bar-item w3-button w3-hide-small w3-padding-large w3-hover-white\" title=\"Account Settings\"><i className=\"fa fa-user\"></i></a>\r\n     <a href=\"#/portal\" className=\"w3-bar-item w3-button w3-hide-small w3-padding-large w3-hover-white\" title=\"Messages\"><i className=\"fa fa-envelope\"></i></a>\r\n     {/* <div class=\"w3-dropdown-hover w3-hide-small\">\r\n       <button class=\"w3-button w3-padding-large\" title=\"Notifications\"><i class=\"fa fa-bell\"></i><span class=\"w3-badge w3-right w3-small w3-green\">3</span></button>     \r\n       <div class=\"w3-dropdown-content w3-card-4 w3-bar-block\">\r\n      \r\n         <a href=\"#/\" class=\"w3-bar-item w3-button\">One new friend request</a>\r\n         <a href=\"#/portal\" class=\"w3-bar-item w3-button\">John Doe posted on your wall</a>\r\n         <a href=\"#\" class=\"w3-bar-item w3-button\">Jane likes your post</a>\r\n       </div>\r\n     </div> */}\r\n     <a href=\"#\" className=\"w3-bar-item w3-button w3-hide-small w3-right w3-padding-large w3-hover-white\" title=\"My Account\">\r\n       <img src=\"/w3images/avatar2.png\" className=\"w3-circle\"  alt=\"Avatar\"/>\r\n     </a>\r\n    </div>\r\n   </div>\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n\r\n","import { BrowserRouter as Router, Route, Switch,HashRouter } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Menu from './shared/menu';\n\n\nconst Home = lazy(() => import('./Home/components/home'))\nconst Portal = lazy(() => import('./Portal/components/portal'))\n\nfunction App() {\n  return (\n    \n    <HashRouter basename='/'>\n    <Menu/>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/portal\" component={Portal}/>\n      </Switch>\n    </Suspense>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}